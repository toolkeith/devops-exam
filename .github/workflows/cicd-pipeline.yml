name: CI/CD Pipeline - Staging

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-southeast1
  SERVICE: fastapi-app-staging
  REGION: asia-southeast1
  REPOSITORY: fastapi-repo

jobs:
  build-and-deploy:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Build and Push Container
      run: |-
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA" ./
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA"

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
        env_vars: |
          DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING_STAGING }}
        flags: |
          --allow-unauthenticated
          --port=8000
          --cpu=1
          --memory=512Mi
          --min-instances=0
          --max-instances=10
          --concurrency=80
          --timeout=300
          --add-cloudsql-instances=${{ secrets.CLOUD_SQL_INSTANCE_CONNECTION_NAME }}

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}
    - name: Wait for service to be ready
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        
    - name: Run Smoke Tests
      id: smoke_tests
      run: |
        SERVICE_URL=${{ steps.deploy.outputs.url }}
        echo "Running smoke tests against: $SERVICE_URL"
        
        # Test 1: Health check
        echo "üîç Testing health endpoint..."
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/")
        if [ "$HEALTH_STATUS" != "200" ]; then
          echo "‚ùå Health check failed with status: $HEALTH_STATUS"
          exit 1
        fi
        echo "‚úÖ Health check passed"
        
        # Test 2: Get all trips
        echo "üîç Testing GET /trip endpoint..."
        TRIPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/trip")
        if [ "$TRIPS_STATUS" != "200" ]; then
          echo "‚ùå GET /trip failed with status: $TRIPS_STATUS"
          exit 1
        fi
        echo "‚úÖ GET /trip endpoint working"
        
        # Test 3: Create a test trip
        echo "üîç Testing POST /trip endpoint..."
        CREATE_RESPONSE=$(curl -s -w "%{http_code}" -X POST "$SERVICE_URL/trip" \
          -H "Content-Type: application/json" \
          -d '{"name": "Test Trip", "description": "Smoke test trip", "joiner_total_count": 5}')
        
        # Extract status code (last 3 characters)
        CREATE_STATUS="${CREATE_RESPONSE: -3}"
        if [ "$CREATE_STATUS" != "201" ]; then
          echo "‚ùå POST /trip failed with status: $CREATE_STATUS"
          exit 1
        fi
        echo "‚úÖ POST /trip endpoint working"
        
        # Test 4: Get specific trip (assuming ID 1 exists after creation)
        echo "üîç Testing GET /trip/{id} endpoint..."
        GET_TRIP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/trip/1")
        if [ "$GET_TRIP_STATUS" != "200" ]; then
          echo "‚ùå GET /trip/1 failed with status: $GET_TRIP_STATUS"
          exit 1
        fi
        echo "‚úÖ GET /trip/{id} endpoint working"
        
        echo "üéâ All smoke tests passed!"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Notify Success
      if: success()
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "text": "üéâ *Deployment Success!*\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}\n*Service URL:* ${{ steps.smoke_tests.outputs.SERVICE_URL }}\n*Workflow:* ${{ github.workflow }}\n\n‚úÖ All smoke tests passed!\n\n*Time:* $(date)"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"

    - name: Notify Failure
      if: failure()
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "text": "‚ùå *Deployment Failed!*\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}\n*Workflow:* ${{ github.workflow }}\n*Job:* ${{ github.job }}\n\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n*Time:* $(date)"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"
