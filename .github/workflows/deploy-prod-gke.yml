name: Deploy to Production - GKE

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-southeast1
  GKE_CLUSTER: fastapi-prod-cluster
  GKE_ZONE: asia-southeast1-a
  DEPLOYMENT_NAME: fastapi-app
  REPOSITORY: fastapi-repo
  IMAGE: fastapi-app

jobs:
  deploy-prod:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Build and Push Container
      run: |-
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" ./
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" ./
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

    - name: Create Kubernetes Secret for Database
      run: |
        kubectl create secret generic db-secret \
          --from-literal=DB_CONNECTION_STRING='${{ secrets.DB_CONNECTION_STRING_PROD }}' \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to GKE
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: $DEPLOYMENT_NAME
          labels:
            app: $DEPLOYMENT_NAME
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: $DEPLOYMENT_NAME
          template:
            metadata:
              labels:
                app: $DEPLOYMENT_NAME
            spec:
              serviceAccountName: fastapi-ksa
              containers:
              - name: $DEPLOYMENT_NAME
                image: $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
                ports:
                - containerPort: 8000
                env:
                - name: DB_CONNECTION_STRING
                  valueFrom:
                    secretKeyRef:
                      name: db-secret
                      key: DB_CONNECTION_STRING
                resources:
                  requests:
                    cpu: 100m
                    memory: 256Mi
                  limits:
                    cpu: 500m
                    memory: 512Mi
                livenessProbe:
                  httpGet:
                    path: /
                    port: 8000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 8000
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: $DEPLOYMENT_NAME-service
          labels:
            app: $DEPLOYMENT_NAME
        spec:
          selector:
            app: $DEPLOYMENT_NAME
          ports:
          - port: 80
            targetPort: 8000
          type: LoadBalancer
        EOF

    - name: Wait for deployment to be ready
      run: |
        kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s

    - name: Get Load Balancer IP
      id: get_ip
      run: |
        echo "Waiting for Load Balancer IP..."
        for i in {1..30}; do
          LB_IP=$(kubectl get service $DEPLOYMENT_NAME-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ ! -z "$LB_IP" ]; then
            echo "SERVICE_IP=$LB_IP" >> $GITHUB_OUTPUT
            echo "Load Balancer IP: $LB_IP"
            break
          fi
          echo "Waiting for Load Balancer IP... ($i/30)"
          sleep 10
        done
        if [ -z "$LB_IP" ]; then
          echo "Failed to get Load Balancer IP"
          exit 1
        fi

    - name: Wait for service to be ready
      run: |
        echo "Waiting for service to be ready..."
        sleep 60

    - name: Run Production Smoke Tests
      id: smoke_tests
      run: |
        SERVICE_URL="http://${{ steps.get_ip.outputs.SERVICE_IP }}"
        echo "Running smoke tests against: $SERVICE_URL"
        
        # Test 1: Health check
        echo "üîç Testing health endpoint..."
        for i in {1..10}; do
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/" || echo "000")
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "‚úÖ Health check passed"
            break
          fi
          echo "Health check attempt $i/10 failed with status: $HEALTH_STATUS"
          sleep 10
        done
        
        if [ "$HEALTH_STATUS" != "200" ]; then
          echo "‚ùå Health check failed after 10 attempts"
          exit 1
        fi
        
        # Test 2: Get all trips
        echo "üîç Testing GET /trip endpoint..."
        TRIPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/trip")
        if [ "$TRIPS_STATUS" != "200" ]; then
          echo "‚ùå GET /trip failed with status: $TRIPS_STATUS"
          exit 1
        fi
        echo "‚úÖ GET /trip endpoint working"
        
        # Test 3: Create a test trip
        echo "üîç Testing POST /trip endpoint..."
        CREATE_RESPONSE=$(curl -s -w "%{http_code}" -X POST "$SERVICE_URL/trip" \
          -H "Content-Type: application/json" \
          -d '{"name": "Production Test Trip", "description": "Production smoke test", "joiner_total_count": 10}')
        
        # Extract status code (last 3 characters)
        CREATE_STATUS="${CREATE_RESPONSE: -3}"
        if [ "$CREATE_STATUS" != "201" ]; then
          echo "‚ùå POST /trip failed with status: $CREATE_STATUS"
          exit 1
        fi
        echo "‚úÖ POST /trip endpoint working"
        
        # Test 4: Get specific trip
        echo "üîç Testing GET /trip/{id} endpoint..."
        GET_TRIP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/trip/1")
        if [ "$GET_TRIP_STATUS" != "200" ]; then
          echo "‚ùå GET /trip/1 failed with status: $GET_TRIP_STATUS"
          exit 1
        fi
        echo "‚úÖ GET /trip/{id} endpoint working"
        
        echo "üéâ All production smoke tests passed!"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Display Deployment Info
      run: |
        echo "üöÄ Production Deployment Complete!"
        echo "Service URL: http://${{ steps.get_ip.outputs.SERVICE_IP }}"
        echo "Deployment Status:"
        kubectl get deployment $DEPLOYMENT_NAME
        echo "Service Status:"
        kubectl get service $DEPLOYMENT_NAME-service
        echo "Pod Status:"
        kubectl get pods -l app=$DEPLOYMENT_NAME

    - name: Notify Success
      if: success()
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "text": "üéâ *Production Deployment Success!*\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}\n*Service URL:* ${{ steps.smoke_tests.outputs.SERVICE_URL }}\n*Environment:* Production (GKE)\n*Replicas:* 3\n\n‚úÖ All production smoke tests passed!\n\n*Time:* $(date)"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"

    - name: Notify Failure
      if: failure()
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "text": "‚ùå *Production Deployment Failed!*\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}\n*Environment:* Production (GKE)\n\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n*Time:* $(date)"
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"
